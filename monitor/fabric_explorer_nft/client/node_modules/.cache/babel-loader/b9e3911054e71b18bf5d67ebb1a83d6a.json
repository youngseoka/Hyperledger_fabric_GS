{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */ // In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n/* eslint-disable */ // To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));/* eslint-enable */export default function register(){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(!isLocalhost){// Is not local host. Just register service worker\nregisterValidSW(swUrl);}else{// This is running on localhost. Lets check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl);}});}}function registerValidSW(swUrl){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nconsole.log('New content is available; please refresh.');}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404||response.headers.get('content-type').indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"sources":["/fabric_explorer_nft/client/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","registerValidSW","checkValidServiceWorker","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n/* eslint-disable */\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n/* eslint-enable */\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (!isLocalhost) {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t} else {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}