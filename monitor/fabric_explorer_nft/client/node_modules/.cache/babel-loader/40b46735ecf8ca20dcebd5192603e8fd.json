{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.filterOptions = filterOptions;\nexports.typeaheadSimilarity = typeaheadSimilarity;\nexports.fullStringDistance = fullStringDistance;\nexports.cleanUpText = cleanUpText;\n/**\n * Filters React Select options and sorts by similarity to a search filter.\n * Handles partial matches, eg. searching for \"Waberg High\" will find \"Raoul\n * Wallenberg Traditional High School\". Case insensitive. Ignores\n * non-alphanumeric characters.\n *\n * @param  options  An unfiltered list of Options.\n * @param? filter  A string to compare against Option labels.\n * @param? substitutions  Strings with multiple spellings or variations that we\n *           expect to match, eg. accented characters or abbreviated words.\n *\n * @return A filtered and sorted array of Options.\n */\n\n/**\n * A collection of string matching algorithms built with React Select in mind.\n */\n// Option type from React Select and similar libraries.\n\nfunction filterOptions(options, filter, substitutions) {\n  // If the filter is blank, return the full list of Options.\n  if (!filter) {\n    return options;\n  }\n\n  var cleanFilter = cleanUpText(filter, substitutions);\n  return options // Filter out undefined or null Options.\n  .filter(function (_ref) {\n    var label = _ref.label,\n        value = _ref.value;\n    return label != null && value != null;\n  }) // Create a {score, Option} pair for each Option based on its label's\n  // similarity to the filter text.\n  .map(function (option) {\n    return {\n      option: option,\n      score: typeaheadSimilarity(cleanUpText(option.label, substitutions), cleanFilter)\n    };\n  }) // Only include matches of the entire substring, with a slight\n  // affordance for transposition or extra characters.\n  .filter(function (pair) {\n    return pair.score >= cleanFilter.length - 2;\n  }) // Sort 'em by order of their score.\n  .sort(function (a, b) {\n    return b.score - a.score;\n  }) // …and grab the original Options back from their pairs.\n  .map(function (pair) {\n    return pair.option;\n  });\n}\n/**\n * Scores the similarity between two strings by returning the length of the\n * longest common subsequence. Intended for comparing strings of different\n * lengths; eg. when matching a typeahead search input with a school name.\n\n * Meant for use in an instant search box where results are being fetched\n * as a user is typing.\n *\n * @param  a  The longer string (though, we flip them if it's shorter).\n * @param  b  The shorter string, eg. a typeahead search input.\n *\n * @return The length of the longest common subsequence. Higher scores indicate\n *           closer matches.\n */\n\n\nfunction typeaheadSimilarity(a, b) {\n  var aLength = a.length;\n  var bLength = b.length;\n  var table = [];\n\n  if (!aLength || !bLength) {\n    return 0;\n  } // Ensure `a` isn't shorter than `b`.\n\n\n  if (aLength < bLength) {\n    var _ref2 = [b, a];\n    a = _ref2[0];\n    b = _ref2[1];\n  } // Early exit if `a` includes `b`; these will be scored higher than any\n  // other options with the same `b` (filter string), with a preference for\n  // shorter `a` strings (option labels).\n\n\n  if (a.indexOf(b) !== -1) {\n    return bLength + 1 / aLength;\n  } // Initialize the table axes:\n  //\n  //    0 0 0 0 ... bLength\n  //    0\n  //    0\n  //\n  //   ...\n  //\n  // aLength\n  //\n\n\n  for (var x = 0; x <= aLength; ++x) {\n    table[x] = [0];\n  }\n\n  for (var y = 0; y <= bLength; ++y) {\n    table[0][y] = 0;\n  } // Populate the rest of the table with a dynamic programming algorithm.\n\n\n  for (var _x = 1; _x <= aLength; ++_x) {\n    for (var _y = 1; _y <= bLength; ++_y) {\n      table[_x][_y] = a[_x - 1] === b[_y - 1] ? 1 + table[_x - 1][_y - 1] : Math.max(table[_x][_y - 1], table[_x - 1][_y]);\n    }\n  }\n\n  return table[aLength][bLength];\n}\n/**\n * Returns the Levenshtein distance between two strings.\n *\n * NOTE: The Jaro-Winkler distance also worked well and is slightly more\n * performant. Levenshtein seems to match more reliably, which is more\n * important here.\n *\n * @param  a  The first string for comparison.\n * @param  b  The second string for comparison.\n *\n * @return The Levenshtein distance, where lower distance indicates higher\n *           similarity.\n */\n\n\nfunction fullStringDistance(a, b) {\n  var aLength = a.length;\n  var bLength = b.length;\n  var table = [];\n\n  if (!aLength) {\n    return bLength;\n  }\n\n  if (!bLength) {\n    return aLength;\n  } // Initialize the table axes:\n  //\n  //    0 1 2 3 4 ... bLength\n  //    1\n  //    2\n  //\n  //   ...\n  //\n  // aLength\n  //\n\n\n  for (var x = 0; x <= aLength; ++x) {\n    table[x] = [x];\n  }\n\n  for (var y = 0; y <= bLength; ++y) {\n    table[0][y] = y;\n  } // Populate the rest of the table with a dynamic programming algorithm.\n\n\n  for (var _x2 = 1; _x2 <= aLength; ++_x2) {\n    for (var _y2 = 1; _y2 <= bLength; ++_y2) {\n      table[_x2][_y2] = a[_x2 - 1] === b[_y2 - 1] ? table[_x2 - 1][_y2 - 1] : 1 + Math.min(table[_x2 - 1][_y2], // Substitution,\n      table[_x2][_y2 - 1], // insertion,\n      table[_x2 - 1][_y2 - 1]); // and deletion.\n    }\n  }\n\n  return table[aLength][bLength];\n}\n/**\n * Apply string substitutions, remove non-alphanumeric characters, and convert\n * all letters to uppercase.\n *\n * eg. 'Scoil Bhríde Primary School' may become 'SCOILBHRIDEPRIMARYSCHOOL'.\n *\n * @param  input  An unsanitized input string.\n * @param  substitutions  Strings with multiple spellings or variations that we\n *          expect to match, for example accented characters or abbreviated\n *          words.\n *\n * @return The sanitized text.\n */\n\n\nfunction cleanUpText(input, substitutions) {\n  if (!input) {\n    return '';\n  } // Uppercase and remove all non-alphanumeric, non-accented characters.\n  // Also remove underscores.\n\n\n  input = input.toUpperCase().replace(/((?=[^\\u00E0-\\u00FC])\\W)|_/g, '');\n\n  if (!substitutions) {\n    return input;\n  }\n\n  var safeSubstitutions = substitutions; // For Flow.\n  // Replace all strings in `safeSubstitutions` with their standardized\n  // counterparts.\n\n  return Object.keys(safeSubstitutions).reduce(function (output, substitution) {\n    var unsubbed = new RegExp(substitution, 'g');\n    return output.replace(unsubbed, safeSubstitutions[substitution]);\n  }, input);\n}","map":{"version":3,"sources":["/fabric_explorer_nft/client/node_modules/fuzzy-match-utils/dist/fuzzy-match-utils.js"],"names":["Object","defineProperty","exports","value","filterOptions","typeaheadSimilarity","fullStringDistance","cleanUpText","options","filter","substitutions","cleanFilter","_ref","label","map","option","score","pair","length","sort","a","b","aLength","bLength","table","_ref2","indexOf","x","y","_x","_y","Math","max","_x2","_y2","min","input","toUpperCase","replace","safeSubstitutions","keys","reduce","output","substitution","unsubbed","RegExp"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,mBAAR,GAA8BA,mBAA9B;AACAH,OAAO,CAACI,kBAAR,GAA6BA,kBAA7B;AACAJ,OAAO,CAACK,WAAR,GAAsBA,WAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;;AACA,SAASH,aAAT,CAAuBI,OAAvB,EAAgCC,MAAhC,EAAwCC,aAAxC,EAAuD;AACnD;AACA,MAAI,CAACD,MAAL,EAAa;AACT,WAAOD,OAAP;AACH;;AAED,MAAIG,WAAW,GAAGJ,WAAW,CAACE,MAAD,EAASC,aAAT,CAA7B;AACA,SAAOF,OAAO,CACd;AADc,GAEbC,MAFM,CAEC,UAAUG,IAAV,EAAgB;AACpB,QAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,QACIV,KAAK,GAAGS,IAAI,CAACT,KADjB;AAEA,WAAOU,KAAK,IAAI,IAAT,IAAiBV,KAAK,IAAI,IAAjC;AACH,GANM,EAOP;AACA;AARO,GASNW,GATM,CASF,UAAUC,MAAV,EAAkB;AACnB,WAAO;AACHA,MAAAA,MAAM,EAAEA,MADL;AAEHC,MAAAA,KAAK,EAAEX,mBAAmB,CAACE,WAAW,CAACQ,MAAM,CAACF,KAAR,EAAeH,aAAf,CAAZ,EAA2CC,WAA3C;AAFvB,KAAP;AAIH,GAdM,EAeP;AACA;AAhBO,GAiBNF,MAjBM,CAiBC,UAAUQ,IAAV,EAAgB;AACpB,WAAOA,IAAI,CAACD,KAAL,IAAcL,WAAW,CAACO,MAAZ,GAAqB,CAA1C;AACH,GAnBM,EAoBP;AApBO,GAqBNC,IArBM,CAqBD,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClB,WAAOA,CAAC,CAACL,KAAF,GAAUI,CAAC,CAACJ,KAAnB;AACH,GAvBM,EAwBP;AAxBO,GAyBNF,GAzBM,CAyBF,UAAUG,IAAV,EAAgB;AACjB,WAAOA,IAAI,CAACF,MAAZ;AACH,GA3BM,CAAP;AA4BH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASV,mBAAT,CAA6Be,CAA7B,EAAgCC,CAAhC,EAAmC;AAC/B,MAAIC,OAAO,GAAGF,CAAC,CAACF,MAAhB;AACA,MAAIK,OAAO,GAAGF,CAAC,CAACH,MAAhB;AACA,MAAIM,KAAK,GAAG,EAAZ;;AAEA,MAAI,CAACF,OAAD,IAAY,CAACC,OAAjB,EAA0B;AACtB,WAAO,CAAP;AACH,GAP8B,CAS/B;;;AACA,MAAID,OAAO,GAAGC,OAAd,EAAuB;AACnB,QAAIE,KAAK,GAAG,CAACJ,CAAD,EAAID,CAAJ,CAAZ;AACAA,IAAAA,CAAC,GAAGK,KAAK,CAAC,CAAD,CAAT;AACAJ,IAAAA,CAAC,GAAGI,KAAK,CAAC,CAAD,CAAT;AACH,GAd8B,CAgB/B;AACA;AACA;;;AACA,MAAIL,CAAC,CAACM,OAAF,CAAUL,CAAV,MAAiB,CAAC,CAAtB,EAAyB;AACrB,WAAOE,OAAO,GAAG,IAAID,OAArB;AACH,GArB8B,CAuB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,OAArB,EAA8B,EAAEK,CAAhC,EAAmC;AAC/BH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAW,CAAC,CAAD,CAAX;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,OAArB,EAA8B,EAAEK,CAAhC,EAAmC;AAC/BJ,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,CAAT,IAAc,CAAd;AACH,GAtC8B,CAwC/B;;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIP,OAAvB,EAAgC,EAAEO,EAAlC,EAAsC;AAClC,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIP,OAAvB,EAAgC,EAAEO,EAAlC,EAAsC;AAClCN,MAAAA,KAAK,CAACK,EAAD,CAAL,CAAUC,EAAV,IAAgBV,CAAC,CAACS,EAAE,GAAG,CAAN,CAAD,KAAcR,CAAC,CAACS,EAAE,GAAG,CAAN,CAAf,GAA0B,IAAIN,KAAK,CAACK,EAAE,GAAG,CAAN,CAAL,CAAcC,EAAE,GAAG,CAAnB,CAA9B,GAAsDC,IAAI,CAACC,GAAL,CAASR,KAAK,CAACK,EAAD,CAAL,CAAUC,EAAE,GAAG,CAAf,CAAT,EAA4BN,KAAK,CAACK,EAAE,GAAG,CAAN,CAAL,CAAcC,EAAd,CAA5B,CAAtE;AACH;AACJ;;AAED,SAAON,KAAK,CAACF,OAAD,CAAL,CAAeC,OAAf,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASjB,kBAAT,CAA4Bc,CAA5B,EAA+BC,CAA/B,EAAkC;AAC9B,MAAIC,OAAO,GAAGF,CAAC,CAACF,MAAhB;AACA,MAAIK,OAAO,GAAGF,CAAC,CAACH,MAAhB;AACA,MAAIM,KAAK,GAAG,EAAZ;;AAEA,MAAI,CAACF,OAAL,EAAc;AACV,WAAOC,OAAP;AACH;;AACD,MAAI,CAACA,OAAL,EAAc;AACV,WAAOD,OAAP;AACH,GAV6B,CAY9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,OAArB,EAA8B,EAAEK,CAAhC,EAAmC;AAC/BH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAW,CAACA,CAAD,CAAX;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,OAArB,EAA8B,EAAEK,CAAhC,EAAmC;AAC/BJ,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASI,CAAT,IAAcA,CAAd;AACH,GA3B6B,CA6B9B;;;AACA,OAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAIX,OAAzB,EAAkC,EAAEW,GAApC,EAAyC;AACrC,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAIX,OAAzB,EAAkC,EAAEW,GAApC,EAAyC;AACrCV,MAAAA,KAAK,CAACS,GAAD,CAAL,CAAWC,GAAX,IAAkBd,CAAC,CAACa,GAAG,GAAG,CAAP,CAAD,KAAeZ,CAAC,CAACa,GAAG,GAAG,CAAP,CAAhB,GAA4BV,KAAK,CAACS,GAAG,GAAG,CAAP,CAAL,CAAeC,GAAG,GAAG,CAArB,CAA5B,GAAsD,IAAIH,IAAI,CAACI,GAAL,CAASX,KAAK,CAACS,GAAG,GAAG,CAAP,CAAL,CAAeC,GAAf,CAAT,EAA8B;AAC1GV,MAAAA,KAAK,CAACS,GAAD,CAAL,CAAWC,GAAG,GAAG,CAAjB,CAD4E,EACvD;AACrBV,MAAAA,KAAK,CAACS,GAAG,GAAG,CAAP,CAAL,CAAeC,GAAG,GAAG,CAArB,CAF4E,CAA5E,CADqC,CAGX;AAC7B;AACJ;;AAED,SAAOV,KAAK,CAACF,OAAD,CAAL,CAAeC,OAAf,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShB,WAAT,CAAqB6B,KAArB,EAA4B1B,aAA5B,EAA2C;AACvC,MAAI,CAAC0B,KAAL,EAAY;AACR,WAAO,EAAP;AACH,GAHsC,CAKvC;AACA;;;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACC,WAAN,GAAoBC,OAApB,CAA4B,6BAA5B,EAA2D,EAA3D,CAAR;;AAEA,MAAI,CAAC5B,aAAL,EAAoB;AAChB,WAAO0B,KAAP;AACH;;AACD,MAAIG,iBAAiB,GAAG7B,aAAxB,CAZuC,CAYA;AAEvC;AACA;;AACA,SAAOV,MAAM,CAACwC,IAAP,CAAYD,iBAAZ,EAA+BE,MAA/B,CAAsC,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;AACzE,QAAIC,QAAQ,GAAG,IAAIC,MAAJ,CAAWF,YAAX,EAAyB,GAAzB,CAAf;AACA,WAAOD,MAAM,CAACJ,OAAP,CAAeM,QAAf,EAAyBL,iBAAiB,CAACI,YAAD,CAA1C,CAAP;AACH,GAHM,EAGJP,KAHI,CAAP;AAIH","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.filterOptions = filterOptions;\nexports.typeaheadSimilarity = typeaheadSimilarity;\nexports.fullStringDistance = fullStringDistance;\nexports.cleanUpText = cleanUpText;\n\n\n/**\n * Filters React Select options and sorts by similarity to a search filter.\n * Handles partial matches, eg. searching for \"Waberg High\" will find \"Raoul\n * Wallenberg Traditional High School\". Case insensitive. Ignores\n * non-alphanumeric characters.\n *\n * @param  options  An unfiltered list of Options.\n * @param? filter  A string to compare against Option labels.\n * @param? substitutions  Strings with multiple spellings or variations that we\n *           expect to match, eg. accented characters or abbreviated words.\n *\n * @return A filtered and sorted array of Options.\n */\n\n/**\n * A collection of string matching algorithms built with React Select in mind.\n */\n\n// Option type from React Select and similar libraries.\nfunction filterOptions(options, filter, substitutions) {\n    // If the filter is blank, return the full list of Options.\n    if (!filter) {\n        return options;\n    }\n\n    var cleanFilter = cleanUpText(filter, substitutions);\n    return options\n    // Filter out undefined or null Options.\n    .filter(function (_ref) {\n        var label = _ref.label,\n            value = _ref.value;\n        return label != null && value != null;\n    })\n    // Create a {score, Option} pair for each Option based on its label's\n    // similarity to the filter text.\n    .map(function (option) {\n        return {\n            option: option,\n            score: typeaheadSimilarity(cleanUpText(option.label, substitutions), cleanFilter)\n        };\n    })\n    // Only include matches of the entire substring, with a slight\n    // affordance for transposition or extra characters.\n    .filter(function (pair) {\n        return pair.score >= cleanFilter.length - 2;\n    })\n    // Sort 'em by order of their score.\n    .sort(function (a, b) {\n        return b.score - a.score;\n    })\n    // …and grab the original Options back from their pairs.\n    .map(function (pair) {\n        return pair.option;\n    });\n}\n\n/**\n * Scores the similarity between two strings by returning the length of the\n * longest common subsequence. Intended for comparing strings of different\n * lengths; eg. when matching a typeahead search input with a school name.\n\n * Meant for use in an instant search box where results are being fetched\n * as a user is typing.\n *\n * @param  a  The longer string (though, we flip them if it's shorter).\n * @param  b  The shorter string, eg. a typeahead search input.\n *\n * @return The length of the longest common subsequence. Higher scores indicate\n *           closer matches.\n */\nfunction typeaheadSimilarity(a, b) {\n    var aLength = a.length;\n    var bLength = b.length;\n    var table = [];\n\n    if (!aLength || !bLength) {\n        return 0;\n    }\n\n    // Ensure `a` isn't shorter than `b`.\n    if (aLength < bLength) {\n        var _ref2 = [b, a];\n        a = _ref2[0];\n        b = _ref2[1];\n    }\n\n    // Early exit if `a` includes `b`; these will be scored higher than any\n    // other options with the same `b` (filter string), with a preference for\n    // shorter `a` strings (option labels).\n    if (a.indexOf(b) !== -1) {\n        return bLength + 1 / aLength;\n    }\n\n    // Initialize the table axes:\n    //\n    //    0 0 0 0 ... bLength\n    //    0\n    //    0\n    //\n    //   ...\n    //\n    // aLength\n    //\n    for (var x = 0; x <= aLength; ++x) {\n        table[x] = [0];\n    }\n    for (var y = 0; y <= bLength; ++y) {\n        table[0][y] = 0;\n    }\n\n    // Populate the rest of the table with a dynamic programming algorithm.\n    for (var _x = 1; _x <= aLength; ++_x) {\n        for (var _y = 1; _y <= bLength; ++_y) {\n            table[_x][_y] = a[_x - 1] === b[_y - 1] ? 1 + table[_x - 1][_y - 1] : Math.max(table[_x][_y - 1], table[_x - 1][_y]);\n        }\n    }\n\n    return table[aLength][bLength];\n}\n\n/**\n * Returns the Levenshtein distance between two strings.\n *\n * NOTE: The Jaro-Winkler distance also worked well and is slightly more\n * performant. Levenshtein seems to match more reliably, which is more\n * important here.\n *\n * @param  a  The first string for comparison.\n * @param  b  The second string for comparison.\n *\n * @return The Levenshtein distance, where lower distance indicates higher\n *           similarity.\n */\nfunction fullStringDistance(a, b) {\n    var aLength = a.length;\n    var bLength = b.length;\n    var table = [];\n\n    if (!aLength) {\n        return bLength;\n    }\n    if (!bLength) {\n        return aLength;\n    }\n\n    // Initialize the table axes:\n    //\n    //    0 1 2 3 4 ... bLength\n    //    1\n    //    2\n    //\n    //   ...\n    //\n    // aLength\n    //\n    for (var x = 0; x <= aLength; ++x) {\n        table[x] = [x];\n    }\n    for (var y = 0; y <= bLength; ++y) {\n        table[0][y] = y;\n    }\n\n    // Populate the rest of the table with a dynamic programming algorithm.\n    for (var _x2 = 1; _x2 <= aLength; ++_x2) {\n        for (var _y2 = 1; _y2 <= bLength; ++_y2) {\n            table[_x2][_y2] = a[_x2 - 1] === b[_y2 - 1] ? table[_x2 - 1][_y2 - 1] : 1 + Math.min(table[_x2 - 1][_y2], // Substitution,\n            table[_x2][_y2 - 1], // insertion,\n            table[_x2 - 1][_y2 - 1]); // and deletion.\n        }\n    }\n\n    return table[aLength][bLength];\n}\n\n/**\n * Apply string substitutions, remove non-alphanumeric characters, and convert\n * all letters to uppercase.\n *\n * eg. 'Scoil Bhríde Primary School' may become 'SCOILBHRIDEPRIMARYSCHOOL'.\n *\n * @param  input  An unsanitized input string.\n * @param  substitutions  Strings with multiple spellings or variations that we\n *          expect to match, for example accented characters or abbreviated\n *          words.\n *\n * @return The sanitized text.\n */\nfunction cleanUpText(input, substitutions) {\n    if (!input) {\n        return '';\n    }\n\n    // Uppercase and remove all non-alphanumeric, non-accented characters.\n    // Also remove underscores.\n    input = input.toUpperCase().replace(/((?=[^\\u00E0-\\u00FC])\\W)|_/g, '');\n\n    if (!substitutions) {\n        return input;\n    }\n    var safeSubstitutions = substitutions; // For Flow.\n\n    // Replace all strings in `safeSubstitutions` with their standardized\n    // counterparts.\n    return Object.keys(safeSubstitutions).reduce(function (output, substitution) {\n        var unsubbed = new RegExp(substitution, 'g');\n        return output.replace(unsubbed, safeSubstitutions[substitution]);\n    }, input);\n}\n"]},"metadata":{},"sourceType":"script"}