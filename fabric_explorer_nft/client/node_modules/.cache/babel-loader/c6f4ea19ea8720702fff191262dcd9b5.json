{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */import{arrayOf,shape,number,string,func}from'prop-types';export var blockHashType=shape({blockhash:string,blocknum:number,channelname:string,creatdt:string,datahash:string,prehash:string,txcount:number,txhash:arrayOf(string)});export var blockListType=arrayOf(shape({blockhash:string,blocknum:number,channelname:string,createdt:string,datahash:string,prehash:string,txcount:number,txhash:arrayOf(string)}));export var blockPerHourType=arrayOf(shape({count:string,datetime:string}));export var blockPerMinType=arrayOf(shape({count:string,datetime:string}));export var chaincodeType=shape({chaincodename:string,channelName:string,channel_genesis_hash:string,path:string,source:string,txCount:number,version:string});export var chaincodeListType=arrayOf(shape({chaincodename:string,channelName:string,channel_genesis_hash:string,path:string,source:string,txCount:number,version:string}));export var channelsType=arrayOf(shape({blocks:number,channel_hash:string,channelname:string,createdat:string,channel_genesis_hash:string,id:number,transactions:number}));export var chartDataType=shape({dataMax:number.isRequired,displayData:arrayOf(shape({count:string,datetime:string})).isRequired});export var currentChannelType=string;export var dashStatsType=shape({chaincodeCount:string,latestBlock:string,peerCount:string,txCount:string});export var getBlockListType=func;export var getBlocksPerHourType=func;export var getBlocksPerMinType=func;export var getChaincodeListType=func;export var getChangeChannelType=func;export var getChannelType=func;export var getChannelListType=func;export var getChannelsType=func;export var getDashStatsType=func;export var getPeerListType=func;export var getPeerStatusType=func;export var getTransactionInfoType=func;export var getTransactionListType=func;export var getTransactionType=func;export var getTransactionByOrgType=func;export var getTransactionPerHourType=func;export var getTransactionPerMinType=func;export var getUserListType=func;export var notificationsType=arrayOf(shape({blockhash:string,datahash:string,time:string,title:string,txcount:number,type:string}));export var onCloseType=func;export var peerListType=arrayOf(shape({channel_genesis_hash:string,name:string,requests:string.isRequired,server_hostname:string.isRequired}));export var peerStatusType=arrayOf(shape({server_hostname:string,status:string}));export var refreshType=func;export var transactionType=shape({chaincodename:string,channelname:string,createdt:string,creator_msp_id:string,endorser_msp_id:string,payload_proposal_hash:string,txhash:string,type:string,validation_code:string});export var transactionByOrgType=arrayOf(shape({count:string,creator_msp_id:string}));export var transactionListType=arrayOf(shape({chaincodename:string,channelname:string,createdt:string,creator_msp_id:string,txhash:string,type:string}));export var transactionPerHourType=arrayOf(shape({count:string,datetime:string}));export var transactionPerMinType=arrayOf(shape({count:string,datetime:string}));export var userListType=arrayOf(shape({username:string,email:string,networkName:string,firstName:string,lastName:string,roles:string}));","map":{"version":3,"sources":["/home/fabric/monitor_sk/fabric_explorer_nft/client/src/components/types/index.js"],"names":["arrayOf","shape","number","string","func","blockHashType","blockhash","blocknum","channelname","creatdt","datahash","prehash","txcount","txhash","blockListType","createdt","blockPerHourType","count","datetime","blockPerMinType","chaincodeType","chaincodename","channelName","channel_genesis_hash","path","source","txCount","version","chaincodeListType","channelsType","blocks","channel_hash","createdat","id","transactions","chartDataType","dataMax","isRequired","displayData","currentChannelType","dashStatsType","chaincodeCount","latestBlock","peerCount","getBlockListType","getBlocksPerHourType","getBlocksPerMinType","getChaincodeListType","getChangeChannelType","getChannelType","getChannelListType","getChannelsType","getDashStatsType","getPeerListType","getPeerStatusType","getTransactionInfoType","getTransactionListType","getTransactionType","getTransactionByOrgType","getTransactionPerHourType","getTransactionPerMinType","getUserListType","notificationsType","time","title","type","onCloseType","peerListType","name","requests","server_hostname","peerStatusType","status","refreshType","transactionType","creator_msp_id","endorser_msp_id","payload_proposal_hash","validation_code","transactionByOrgType","transactionListType","transactionPerHourType","transactionPerMinType","userListType","username","email","networkName","firstName","lastName","roles"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport { arrayOf, shape, number, string, func } from 'prop-types';\n\nexport const blockHashType = shape({\n\tblockhash: string,\n\tblocknum: number,\n\tchannelname: string,\n\tcreatdt: string,\n\tdatahash: string,\n\tprehash: string,\n\ttxcount: number,\n\ttxhash: arrayOf(string)\n});\n\nexport const blockListType = arrayOf(\n\tshape({\n\t\tblockhash: string,\n\t\tblocknum: number,\n\t\tchannelname: string,\n\t\tcreatedt: string,\n\t\tdatahash: string,\n\t\tprehash: string,\n\t\ttxcount: number,\n\t\ttxhash: arrayOf(string)\n\t})\n);\n\nexport const blockPerHourType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const blockPerMinType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const chaincodeType = shape({\n\tchaincodename: string,\n\tchannelName: string,\n\tchannel_genesis_hash: string,\n\tpath: string,\n\tsource: string,\n\ttxCount: number,\n\tversion: string\n});\n\nexport const chaincodeListType = arrayOf(\n\tshape({\n\t\tchaincodename: string,\n\t\tchannelName: string,\n\t\tchannel_genesis_hash: string,\n\t\tpath: string,\n\t\tsource: string,\n\t\ttxCount: number,\n\t\tversion: string\n\t})\n);\n\nexport const channelsType = arrayOf(\n\tshape({\n\t\tblocks: number,\n\t\tchannel_hash: string,\n\t\tchannelname: string,\n\t\tcreatedat: string,\n\t\tchannel_genesis_hash: string,\n\t\tid: number,\n\t\ttransactions: number\n\t})\n);\n\nexport const chartDataType = shape({\n\tdataMax: number.isRequired,\n\tdisplayData: arrayOf(\n\t\tshape({\n\t\t\tcount: string,\n\t\t\tdatetime: string\n\t\t})\n\t).isRequired\n});\n\nexport const currentChannelType = string;\n\nexport const dashStatsType = shape({\n\tchaincodeCount: string,\n\tlatestBlock: string,\n\tpeerCount: string,\n\ttxCount: string\n});\n\nexport const getBlockListType = func;\nexport const getBlocksPerHourType = func;\nexport const getBlocksPerMinType = func;\nexport const getChaincodeListType = func;\nexport const getChangeChannelType = func;\nexport const getChannelType = func;\nexport const getChannelListType = func;\nexport const getChannelsType = func;\nexport const getDashStatsType = func;\nexport const getPeerListType = func;\nexport const getPeerStatusType = func;\nexport const getTransactionInfoType = func;\nexport const getTransactionListType = func;\nexport const getTransactionType = func;\nexport const getTransactionByOrgType = func;\nexport const getTransactionPerHourType = func;\nexport const getTransactionPerMinType = func;\nexport const getUserListType = func;\n\nexport const notificationsType = arrayOf(\n\tshape({\n\t\tblockhash: string,\n\t\tdatahash: string,\n\t\ttime: string,\n\t\ttitle: string,\n\t\ttxcount: number,\n\t\ttype: string\n\t})\n);\n\nexport const onCloseType = func;\n\nexport const peerListType = arrayOf(\n\tshape({\n\t\tchannel_genesis_hash: string,\n\t\tname: string,\n\t\trequests: string.isRequired,\n\t\tserver_hostname: string.isRequired\n\t})\n);\n\nexport const peerStatusType = arrayOf(\n\tshape({\n\t\tserver_hostname: string,\n\t\tstatus: string\n\t})\n);\n\nexport const refreshType = func;\n\nexport const transactionType = shape({\n\tchaincodename: string,\n\tchannelname: string,\n\tcreatedt: string,\n\tcreator_msp_id: string,\n\tendorser_msp_id: string,\n\tpayload_proposal_hash: string,\n\ttxhash: string,\n\ttype: string,\n\tvalidation_code: string\n});\n\nexport const transactionByOrgType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tcreator_msp_id: string\n\t})\n);\n\nexport const transactionListType = arrayOf(\n\tshape({\n\t\tchaincodename: string,\n\t\tchannelname: string,\n\t\tcreatedt: string,\n\t\tcreator_msp_id: string,\n\t\ttxhash: string,\n\t\ttype: string\n\t})\n);\n\nexport const transactionPerHourType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const transactionPerMinType = arrayOf(\n\tshape({\n\t\tcount: string,\n\t\tdatetime: string\n\t})\n);\n\nexport const userListType = arrayOf(\n\tshape({\n\t\tusername: string,\n\t\temail: string,\n\t\tnetworkName: string,\n\t\tfirstName: string,\n\t\tlastName: string,\n\t\troles: string\n\t})\n);\n"]},"metadata":{},"sourceType":"module"}