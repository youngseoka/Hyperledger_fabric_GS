{"ast":null,"code":"function createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar diacritics = createCommonjsModule(function (module) {\n  // Diacritics.js\n  // \n  // Started as something to be an equivalent of the Google Java Library diacritics library for JavaScript.\n  // Found this: http://jsperf.com/diacritics/6 and converted it into a reusable module.\n  // \n  // @author Nijiko Yonskai\n  // @license MIT\n  // @copyright Nijikokun 2013 <nijikokun@gmail.com>\n  (function (name, definition) {\n    if ('object' != 'undefined' && module.exports) module.exports = definition();else if (typeof undefined == 'function' && undefined.amd) undefined(definition);else this[name] = definition();\n  })('Diacritics', function () {\n    // Create public object\n    var output = {\n      map: {}\n    }; // Create private reference map.\n\n    var reference = [{\n      'base': ' ',\n      'letters': \"\\xA0\"\n    }, {\n      'base': 'A',\n      'letters': \"A\\u24B6\\uFF21\\xC0\\xC1\\xC2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\xC3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\xC4\\u01DE\\u1EA2\\xC5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\"\n    }, {\n      'base': 'AA',\n      'letters': \"\\uA732\"\n    }, {\n      'base': 'AE',\n      'letters': \"\\xC6\\u01FC\\u01E2\"\n    }, {\n      'base': 'AO',\n      'letters': \"\\uA734\"\n    }, {\n      'base': 'AU',\n      'letters': \"\\uA736\"\n    }, {\n      'base': 'AV',\n      'letters': \"\\uA738\\uA73A\"\n    }, {\n      'base': 'AY',\n      'letters': \"\\uA73C\"\n    }, {\n      'base': 'B',\n      'letters': \"B\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181\"\n    }, {\n      'base': 'C',\n      'letters': \"C\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\xC7\\u1E08\\u0187\\u023B\\uA73E\"\n    }, {\n      'base': 'D',\n      'letters': \"D\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779\"\n    }, {\n      'base': 'DZ',\n      'letters': \"\\u01F1\\u01C4\"\n    }, {\n      'base': 'Dz',\n      'letters': \"\\u01F2\\u01C5\"\n    }, {\n      'base': 'E',\n      'letters': \"E\\u24BA\\uFF25\\xC8\\xC9\\xCA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\xCB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\"\n    }, {\n      'base': 'F',\n      'letters': \"F\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\"\n    }, {\n      'base': 'G',\n      'letters': \"G\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\"\n    }, {\n      'base': 'H',\n      'letters': \"H\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\"\n    }, {\n      'base': 'I',\n      'letters': \"I\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\"\n    }, {\n      'base': 'J',\n      'letters': \"J\\u24BF\\uFF2A\\u0134\\u0248\"\n    }, {\n      'base': 'K',\n      'letters': \"K\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\"\n    }, {\n      'base': 'L',\n      'letters': \"L\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\"\n    }, {\n      'base': 'LJ',\n      'letters': \"\\u01C7\"\n    }, {\n      'base': 'Lj',\n      'letters': \"\\u01C8\"\n    }, {\n      'base': 'M',\n      'letters': \"M\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\"\n    }, {\n      'base': 'N',\n      'letters': \"N\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4\"\n    }, {\n      'base': 'NJ',\n      'letters': \"\\u01CA\"\n    }, {\n      'base': 'Nj',\n      'letters': \"\\u01CB\"\n    }, {\n      'base': 'O',\n      'letters': \"O\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\"\n    }, {\n      'base': 'OI',\n      'letters': \"\\u01A2\"\n    }, {\n      'base': 'OO',\n      'letters': \"\\uA74E\"\n    }, {\n      'base': 'OU',\n      'letters': \"\\u0222\"\n    }, {\n      'base': 'P',\n      'letters': \"P\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\"\n    }, {\n      'base': 'Q',\n      'letters': \"Q\\u24C6\\uFF31\\uA756\\uA758\\u024A\"\n    }, {\n      'base': 'R',\n      'letters': \"R\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\"\n    }, {\n      'base': 'S',\n      'letters': \"S\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\"\n    }, {\n      'base': 'T',\n      'letters': \"T\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\"\n    }, {\n      'base': 'Th',\n      'letters': \"\\xDE\"\n    }, {\n      'base': 'TZ',\n      'letters': \"\\uA728\"\n    }, {\n      'base': 'U',\n      'letters': \"U\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\"\n    }, {\n      'base': 'V',\n      'letters': \"V\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\"\n    }, {\n      'base': 'VY',\n      'letters': \"\\uA760\"\n    }, {\n      'base': 'W',\n      'letters': \"W\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\"\n    }, {\n      'base': 'X',\n      'letters': \"X\\u24CD\\uFF38\\u1E8A\\u1E8C\"\n    }, {\n      'base': 'Y',\n      'letters': \"Y\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\"\n    }, {\n      'base': 'Z',\n      'letters': \"Z\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\"\n    }, {\n      'base': 'a',\n      'letters': \"a\\u24D0\\uFF41\\u1E9A\\xE0\\xE1\\xE2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\xE3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\xE4\\u01DF\\u1EA3\\xE5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\"\n    }, {\n      'base': 'aa',\n      'letters': \"\\uA733\"\n    }, {\n      'base': 'ae',\n      'letters': \"\\xE6\\u01FD\\u01E3\"\n    }, {\n      'base': 'ao',\n      'letters': \"\\uA735\"\n    }, {\n      'base': 'au',\n      'letters': \"\\uA737\"\n    }, {\n      'base': 'av',\n      'letters': \"\\uA739\\uA73B\"\n    }, {\n      'base': 'ay',\n      'letters': \"\\uA73D\"\n    }, {\n      'base': 'b',\n      'letters': \"b\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\"\n    }, {\n      'base': 'c',\n      'letters': \"c\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\xE7\\u1E09\\u0188\\u023C\\uA73F\\u2184\"\n    }, {\n      'base': 'd',\n      'letters': \"d\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A\"\n    }, {\n      'base': 'dz',\n      'letters': \"\\u01F3\\u01C6\"\n    }, {\n      'base': 'e',\n      'letters': \"e\\u24D4\\uFF45\\xE8\\xE9\\xEA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\xEB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD\"\n    }, {\n      'base': 'f',\n      'letters': \"f\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C\"\n    }, {\n      'base': 'ff',\n      'letters': \"\\uFB00\"\n    }, {\n      'base': 'fi',\n      'letters': \"\\uFB01\"\n    }, {\n      'base': 'fl',\n      'letters': \"\\uFB02\"\n    }, {\n      'base': 'ffi',\n      'letters': \"\\uFB03\"\n    }, {\n      'base': 'ffl',\n      'letters': \"\\uFB04\"\n    }, {\n      'base': 'g',\n      'letters': \"g\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F\"\n    }, {\n      'base': 'h',\n      'letters': \"h\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\"\n    }, {\n      'base': 'hv',\n      'letters': \"\\u0195\"\n    }, {\n      'base': 'i',\n      'letters': \"i\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\"\n    }, {\n      'base': 'j',\n      'letters': \"j\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\"\n    }, {\n      'base': 'k',\n      'letters': \"k\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\"\n    }, {\n      'base': 'l',\n      'letters': \"l\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\"\n    }, {\n      'base': 'lj',\n      'letters': \"\\u01C9\"\n    }, {\n      'base': 'm',\n      'letters': \"m\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\"\n    }, {\n      'base': 'n',\n      'letters': \"n\\xF1n\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\"\n    }, {\n      'base': 'nj',\n      'letters': \"\\u01CC\"\n    }, {\n      'base': 'o',\n      'letters': \"\\u07C0o\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\u0254\\uA74B\\uA74D\\u0275\"\n    }, {\n      'base': 'oe',\n      'letters': \"\\u0152\\u0153\"\n    }, {\n      'base': 'oi',\n      'letters': \"\\u01A3\"\n    }, {\n      'base': 'ou',\n      'letters': \"\\u0223\"\n    }, {\n      'base': 'oo',\n      'letters': \"\\uA74F\"\n    }, {\n      'base': 'p',\n      'letters': \"p\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\"\n    }, {\n      'base': 'q',\n      'letters': \"q\\u24E0\\uFF51\\u024B\\uA757\\uA759\"\n    }, {\n      'base': 'r',\n      'letters': \"r\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\"\n    }, {\n      'base': 's',\n      'letters': \"s\\u24E2\\uFF53\\xDF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\"\n    }, {\n      'base': 'ss',\n      'letters': '\\xDF'\n    }, {\n      'base': 't',\n      'letters': \"t\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\"\n    }, {\n      'base': 'th',\n      'letters': \"\\xFE\"\n    }, {\n      'base': 'tz',\n      'letters': \"\\uA729\"\n    }, {\n      'base': 'u',\n      'letters': \"u\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\"\n    }, {\n      'base': 'v',\n      'letters': \"v\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\"\n    }, {\n      'base': 'vy',\n      'letters': \"\\uA761\"\n    }, {\n      'base': 'w',\n      'letters': \"w\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\"\n    }, {\n      'base': 'x',\n      'letters': \"x\\u24E7\\uFF58\\u1E8B\\u1E8D\"\n    }, {\n      'base': 'y',\n      'letters': \"y\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\"\n    }, {\n      'base': 'z',\n      'letters': \"z\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\"\n    }]; // Generate reference mapping\n\n    for (var i = 0, refLength = reference.length; i < refLength; i++) {\n      var letters = reference[i].letters.split(\"\");\n\n      for (var j = 0, letLength = letters.length; j < letLength; j++) {\n        output.map[letters[j]] = reference[i].base;\n      }\n    }\n    /**\n     * Clean accents (diacritics) from string.\n     * \n     * @param  {String} input String to be cleaned of diacritics.\n     * @return {String}\n     */\n\n\n    output.clean = function (input) {\n      if (!input || !input.length || input.length < 1) {\n        return \"\";\n      }\n\n      var string = \"\";\n      var letters = input.split(\"\");\n      var index = 0;\n      var length = letters.length;\n      var letter;\n\n      for (; index < length; index++) {\n        letter = letters[index];\n        string += letter in output.map ? output.map[letter] : letter;\n      }\n\n      return string;\n    };\n\n    return output;\n  });\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2017 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\n\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 9,\n  EQUAL: 8,\n  STARTS_WITH: 7,\n  WORD_STARTS_WITH: 6,\n  STRING_CASE: 5,\n  STRING_CASE_ACRONYM: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nvar caseRankings = {\n  CAMEL: 0.8,\n  PASCAL: 0.6,\n  KEBAB: 0.4,\n  SNAKE: 0.2,\n  NO_CASE: 0\n};\nmatchSorter.rankings = rankings;\nmatchSorter.caseRankings = caseRankings;\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {}; // not performing any search/sort if value(search term) is empty\n\n  if (!value) return items;\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n  var matchedItems = items.reduce(function (matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex,\n        _getHighestRanking$ke = _getHighestRanking.keyThreshold,\n        keyThreshold = _getHighestRanking$ke === undefined ? threshold : _getHighestRanking$ke;\n\n    if (rank >= keyThreshold) {\n      matches.push({\n        item: item,\n        rank: rank,\n        index: index,\n        keyIndex: keyIndex\n      });\n    }\n\n    return matches;\n  }, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n    }\n\n    return {\n      rank: rank,\n      keyIndex: keyIndex,\n      keyThreshold: keyThreshold\n    };\n  }, {\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 12] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  var caseRank = getCaseRanking(testString);\n  var isPartial = isPartialOfCase(testString, stringToRank, caseRank);\n  var isCasedAcronym = isCaseAcronym(testString, stringToRank, caseRank); // Lower casing before further comparison\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL + caseRank;\n  } // starts with\n\n\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH + caseRank;\n  } // word starts with\n\n\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH + caseRank;\n  } // is a part inside a cased string\n\n\n  if (isPartial) {\n    return rankings.STRING_CASE + caseRank;\n  } // is acronym for a cased string\n\n\n  if (caseRank > 0 && isCasedAcronym) {\n    return rankings.STRING_CASE_ACRONYM + caseRank;\n  } // contains\n\n\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS + caseRank;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM + caseRank;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score base on the case of the testString\n * @param {String} testString - the string to test against\n * @returns {Number} the number of the ranking,\n * based on the case between 0 and 1 for how the testString matches the case\n */\n\n\nfunction getCaseRanking(testString) {\n  var containsUpperCase = testString.toLowerCase() !== testString;\n  var containsDash = testString.indexOf('-') >= 0;\n  var containsUnderscore = testString.indexOf('_') >= 0;\n\n  if (!containsUpperCase && !containsUnderscore && containsDash) {\n    return caseRankings.KEBAB;\n  }\n\n  if (!containsUpperCase && containsUnderscore && !containsDash) {\n    return caseRankings.SNAKE;\n  }\n\n  if (containsUpperCase && !containsDash && !containsUnderscore) {\n    var startsWithUpperCase = testString[0].toUpperCase() === testString[0];\n\n    if (startsWithUpperCase) {\n      return caseRankings.PASCAL;\n    }\n\n    return caseRankings.CAMEL;\n  }\n\n  return caseRankings.NO_CASE;\n}\n/**\n * Returns whether the stringToRank is one of the case parts in the testString (works with any string case)\n * @example\n * // returns true\n * isPartialOfCase('helloWorld', 'world', caseRankings.CAMEL)\n * @example\n * // returns false\n * isPartialOfCase('helloWorld', 'oworl', caseRankings.CAMEL)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Number} caseRanking - the ranking score based on case of testString\n * @returns {Boolean} whether the stringToRank is one of the case parts in the testString\n */\n\n\nfunction isPartialOfCase(testString, stringToRank, caseRanking) {\n  var testIndex = testString.toLowerCase().indexOf(stringToRank.toLowerCase());\n\n  switch (caseRanking) {\n    case caseRankings.SNAKE:\n      return testString[testIndex - 1] === '_';\n\n    case caseRankings.KEBAB:\n      return testString[testIndex - 1] === '-';\n\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      return testIndex !== -1 && testString[testIndex] === testString[testIndex].toUpperCase();\n\n    default:\n      return false;\n  }\n}\n/**\n * Check if stringToRank is an acronym for a partial case\n * @example\n * // returns true\n * isCaseAcronym('super_duper_file', 'sdf', caseRankings.SNAKE)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the acronym to test\n * @param {Number} caseRank - the ranking of the case\n * @returns {Boolean} whether the stringToRank is an acronym for the testString\n */\n\n\nfunction isCaseAcronym(testString, stringToRank, caseRank) {\n  var splitValue = null;\n\n  switch (caseRank) {\n    case caseRankings.SNAKE:\n      splitValue = '_';\n      break;\n\n    case caseRankings.KEBAB:\n      splitValue = '-';\n      break;\n\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      splitValue = /(?=[A-Z])/;\n      break;\n\n    default:\n      splitValue = null;\n  }\n\n  var splitTestString = testString.split(splitValue);\n  return stringToRank.toLowerCase().split('').reduce(function (correct, char, charIndex) {\n    var splitItem = splitTestString[charIndex];\n    return correct && splitItem && splitItem[0].toLowerCase() === char;\n  }, true);\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a loose match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return function (spread) {\n    var matching = spread - stringToRank.length + 1;\n    var ranking = rankings.MATCHES + 1 / matching;\n    return ranking;\n  }(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\n\n\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aIndex = a.index,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bIndex = b.index,\n      bKeyIndex = b.keyIndex;\n\n  if (aRank === bRank) {\n    if (aKeyIndex === bKeyIndex) {\n      return aIndex < bIndex ? aFirst : bFirst;\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  value = '' + value; // toString\n\n  if (!keepDiacritics) {\n    value = diacritics.clean(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n\n  var value = void 0;\n\n  if (typeof key === 'function') {\n    value = key(item); // eslint-disable-next-line no-negated-condition\n  } else if (key.indexOf('.') !== -1) {\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj ? itemObj[nestedKey] : null;\n    }, item);\n  } else {\n    value = item[key];\n  } // concat because `value` can be a string or an array\n  // eslint-disable-next-line\n\n\n  return value != null ? [].concat(value) : null;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n\n    return allVals;\n  }, []);\n}\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\n\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = {\n      key: key\n    };\n  }\n\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n}\n\nexport default matchSorter;\nexport { rankings };","map":{"version":3,"sources":["/home/fabric/monitor_sk/fabric_explorer_nft/client/node_modules/match-sorter/dist/match-sorter.esm.js"],"names":["createCommonjsModule","fn","module","exports","diacritics","name","definition","undefined","amd","output","map","reference","i","refLength","length","letters","split","j","letLength","base","clean","input","string","index","letter","_typeof","Symbol","iterator","obj","constructor","prototype","_extends","Object","assign","target","arguments","source","key","hasOwnProperty","call","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","STRING_CASE","STRING_CASE_ACRONYM","CONTAINS","ACRONYM","MATCHES","NO_MATCH","caseRankings","CAMEL","PASCAL","KEBAB","SNAKE","NO_CASE","matchSorter","items","value","options","keys","_options$threshold","threshold","matchedItems","reduce","matches","item","_getHighestRanking","getHighestRanking","rank","keyIndex","_getHighestRanking$ke","keyThreshold","push","sort","sortRankedItems","_ref","getMatchRanking","valuesToRank","getAllValuesToRank","_ref2","_ref3","itemValue","attributes","newRank","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","caseRank","getCaseRanking","isPartial","isPartialOfCase","isCasedAcronym","isCaseAcronym","toLowerCase","indexOf","getAcronym","getClosenessRanking","acronym","wordsInString","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","containsUpperCase","containsDash","containsUnderscore","startsWithUpperCase","toUpperCase","caseRanking","testIndex","splitValue","splitTestString","correct","char","charIndex","splitItem","charNumber","findMatchingCharacter","matchChar","stringChar","firstIndex","found","spread","matching","ranking","a","b","aFirst","bFirst","aRank","aIndex","aKeyIndex","bRank","bIndex","bKeyIndex","_ref4","keepDiacritics","getItemValues","itemObj","nestedKey","concat","allVals","values","getKeyAttributes","Infinity"],"mappings":"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","sourcesContent":["function createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar diacritics = createCommonjsModule(function (module) {\n// Diacritics.js\n// \n// Started as something to be an equivalent of the Google Java Library diacritics library for JavaScript.\n// Found this: http://jsperf.com/diacritics/6 and converted it into a reusable module.\n// \n// @author Nijiko Yonskai\n// @license MIT\n// @copyright Nijikokun 2013 <nijikokun@gmail.com>\n(function (name, definition) {\n  if ('object' != 'undefined' && module.exports) module.exports = definition();\n  else if (typeof undefined == 'function' && undefined.amd) undefined(definition);\n  else this[name] = definition();\n})('Diacritics', function () {\n  // Create public object\n  var output = {\n    map: {}\n  };\n\n  // Create private reference map.\n  var reference = [\n    {'base':' ',    'letters':'\\u00A0'},\n    {'base':'A',    'letters':'\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F'},\n    {'base':'AA',   'letters':'\\uA732'},\n    {'base':'AE',   'letters':'\\u00C6\\u01FC\\u01E2'},\n    {'base':'AO',   'letters':'\\uA734'},\n    {'base':'AU',   'letters':'\\uA736'},\n    {'base':'AV',   'letters':'\\uA738\\uA73A'},\n    {'base':'AY',   'letters':'\\uA73C'},\n    {'base':'B',    'letters':'\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181'},\n    {'base':'C',    'letters':'\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E'},\n    {'base':'D',    'letters':'\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779'},\n    {'base':'DZ',   'letters':'\\u01F1\\u01C4'},\n    {'base':'Dz',   'letters':'\\u01F2\\u01C5'},\n    {'base':'E',    'letters':'\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E'},\n    {'base':'F',    'letters':'\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B'},\n    {'base':'G',    'letters':'\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E'},\n    {'base':'H',    'letters':'\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D'},\n    {'base':'I',    'letters':'\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197'},\n    {'base':'J',    'letters':'\\u004A\\u24BF\\uFF2A\\u0134\\u0248'},\n    {'base':'K',    'letters':'\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2'},\n    {'base':'L',    'letters':'\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780'},\n    {'base':'LJ',   'letters':'\\u01C7'},\n    {'base':'Lj',   'letters':'\\u01C8'},\n    {'base':'M',    'letters':'\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C'},\n    {'base':'N',    'letters':'\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4'},\n    {'base':'NJ',   'letters':'\\u01CA'},\n    {'base':'Nj',   'letters':'\\u01CB'},\n    {'base':'O',    'letters':'\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C'},\n    {'base':'OI',   'letters':'\\u01A2'},\n    {'base':'OO',   'letters':'\\uA74E'},\n    {'base':'OU',   'letters':'\\u0222'},\n    {'base':'P',    'letters':'\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754'},\n    {'base':'Q',    'letters':'\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A'},\n    {'base':'R',    'letters':'\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782'},\n    {'base':'S',    'letters':'\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784'},\n    {'base':'T',    'letters':'\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786'},\n    {'base':'Th',   'letters':'\\u00DE'},\n    {'base':'TZ',   'letters':'\\uA728'},\n    {'base':'U',    'letters':'\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244'},\n    {'base':'V',    'letters':'\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245'},\n    {'base':'VY',   'letters':'\\uA760'},\n    {'base':'W',    'letters':'\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72'},\n    {'base':'X',    'letters':'\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C'},\n    {'base':'Y',    'letters':'\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE'},\n    {'base':'Z',    'letters':'\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762'},\n    {'base':'a',    'letters':'\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251'},\n    {'base':'aa',   'letters':'\\uA733'},\n    {'base':'ae',   'letters':'\\u00E6\\u01FD\\u01E3'},\n    {'base':'ao',   'letters':'\\uA735'},\n    {'base':'au',   'letters':'\\uA737'},\n    {'base':'av',   'letters':'\\uA739\\uA73B'},\n    {'base':'ay',   'letters':'\\uA73D'},\n    {'base':'b',    'letters':'\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253'},\n    {'base':'c',    'letters':'\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184'},\n    {'base':'d',    'letters':'\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A'},\n    {'base':'dz',   'letters':'\\u01F3\\u01C6'},\n    {'base':'e',    'letters':'\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD'},\n    {'base':'f',    'letters':'\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C'},\n    {'base':'ff',   'letters':'\\uFB00'},\n    {'base':'fi',   'letters':'\\uFB01'},\n    {'base':'fl',   'letters':'\\uFB02'},\n    {'base':'ffi',  'letters':'\\uFB03'},\n    {'base':'ffl',  'letters':'\\uFB04'},\n    {'base':'g',    'letters':'\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F'},\n    {'base':'h',    'letters':'\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265'},\n    {'base':'hv',   'letters':'\\u0195'},\n    {'base':'i',    'letters':'\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131'},\n    {'base':'j',    'letters':'\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249'},\n    {'base':'k',    'letters':'\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3'},\n    {'base':'l',    'letters':'\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747'},\n    {'base':'lj',   'letters':'\\u01C9'},\n    {'base':'m',    'letters':'\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F'},\n    {'base':'n',    'letters':'\\x6E\\xF1\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509'},\n    {'base':'nj',   'letters':'\\u01CC'},\n    {'base':'o',    'letters':'\\u07C0\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275'},\n    {'base':'oe',   'letters':'\\u0152\\u0153'},\n    {'base':'oi',   'letters':'\\u01A3'},\n    {'base':'ou',   'letters':'\\u0223'},\n    {'base':'oo',   'letters':'\\uA74F'},\n    {'base':'p',    'letters':'\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755'},\n    {'base':'q',    'letters':'\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759'},\n    {'base':'r',    'letters':'\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783'},\n    {'base':'s',    'letters':'\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B'},\n    {'base':'ss',   'letters':'\\xDF'},\n    {'base':'t',    'letters':'\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787'},\n    {'base':'th',   'letters':'\\u00FE'},\n    {'base':'tz',   'letters':'\\uA729'},\n    {'base':'u',    'letters': '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289'},\n    {'base':'v',    'letters':'\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C'},\n    {'base':'vy',   'letters':'\\uA761'},\n    {'base':'w',    'letters':'\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73'},\n    {'base':'x',    'letters':'\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D'},\n    {'base':'y',    'letters':'\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF'},\n    {'base':'z',    'letters':'\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763'}\n  ];\n\n  // Generate reference mapping\n  for (var i = 0, refLength = reference.length; i < refLength; i++){\n    var letters = reference[i].letters.split(\"\");\n\n    for (var j = 0, letLength = letters.length; j < letLength; j++){\n      output.map[letters[j]] = reference[i].base;\n    }\n  }\n\n  /**\n   * Clean accents (diacritics) from string.\n   * \n   * @param  {String} input String to be cleaned of diacritics.\n   * @return {String}\n   */\n  output.clean = function (input) {\n    if (!input || !input.length || input.length < 1) {\n      return \"\";\n    }\n\n    var string = \"\";\n    var letters = input.split(\"\");\n    var index = 0;\n    var length = letters.length;\n    var letter;\n\n    for (; index < length; index++) {\n      letter = letters[index];\n      string += letter in output.map ? output.map[letter] : letter;\n    }\n\n    return string;\n  };\n\n  return output;\n});\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2017 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 9,\n  EQUAL: 8,\n  STARTS_WITH: 7,\n  WORD_STARTS_WITH: 6,\n  STRING_CASE: 5,\n  STRING_CASE_ACRONYM: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\n\nvar caseRankings = {\n  CAMEL: 0.8,\n  PASCAL: 0.6,\n  KEBAB: 0.4,\n  SNAKE: 0.2,\n  NO_CASE: 0\n};\n\nmatchSorter.rankings = rankings;\nmatchSorter.caseRankings = caseRankings;\n\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  // not performing any search/sort if value(search term) is empty\n  if (!value) return items;\n\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n\n  var matchedItems = items.reduce(function (matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex,\n        _getHighestRanking$ke = _getHighestRanking.keyThreshold,\n        keyThreshold = _getHighestRanking$ke === undefined ? threshold : _getHighestRanking$ke;\n\n    if (rank >= keyThreshold) {\n      matches.push({ item: item, rank: rank, index: index, keyIndex: keyIndex });\n    }\n    return matches;\n  }, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n}\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex,\n        keyThreshold = _ref2.keyThreshold;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking,\n        threshold = attributes.threshold;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n    }\n    return { rank: rank, keyIndex: keyIndex, keyThreshold: keyThreshold };\n  }, { rank: rankings.NO_MATCH, keyIndex: -1, keyThreshold: options.threshold });\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 12] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options);\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  var caseRank = getCaseRanking(testString);\n  var isPartial = isPartialOfCase(testString, stringToRank, caseRank);\n  var isCasedAcronym = isCaseAcronym(testString, stringToRank, caseRank);\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase();\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL + caseRank;\n  }\n\n  // starts with\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH + caseRank;\n  }\n\n  // word starts with\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH + caseRank;\n  }\n\n  // is a part inside a cased string\n  if (isPartial) {\n    return rankings.STRING_CASE + caseRank;\n  }\n\n  // is acronym for a cased string\n  if (caseRank > 0 && isCasedAcronym) {\n    return rankings.STRING_CASE_ACRONYM + caseRank;\n  }\n\n  // contains\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS + caseRank;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  }\n\n  // acronym\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM + caseRank;\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank);\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n\n/**\n * Returns a score base on the case of the testString\n * @param {String} testString - the string to test against\n * @returns {Number} the number of the ranking,\n * based on the case between 0 and 1 for how the testString matches the case\n */\nfunction getCaseRanking(testString) {\n  var containsUpperCase = testString.toLowerCase() !== testString;\n  var containsDash = testString.indexOf('-') >= 0;\n  var containsUnderscore = testString.indexOf('_') >= 0;\n\n  if (!containsUpperCase && !containsUnderscore && containsDash) {\n    return caseRankings.KEBAB;\n  }\n\n  if (!containsUpperCase && containsUnderscore && !containsDash) {\n    return caseRankings.SNAKE;\n  }\n\n  if (containsUpperCase && !containsDash && !containsUnderscore) {\n    var startsWithUpperCase = testString[0].toUpperCase() === testString[0];\n    if (startsWithUpperCase) {\n      return caseRankings.PASCAL;\n    }\n\n    return caseRankings.CAMEL;\n  }\n\n  return caseRankings.NO_CASE;\n}\n\n/**\n * Returns whether the stringToRank is one of the case parts in the testString (works with any string case)\n * @example\n * // returns true\n * isPartialOfCase('helloWorld', 'world', caseRankings.CAMEL)\n * @example\n * // returns false\n * isPartialOfCase('helloWorld', 'oworl', caseRankings.CAMEL)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Number} caseRanking - the ranking score based on case of testString\n * @returns {Boolean} whether the stringToRank is one of the case parts in the testString\n */\nfunction isPartialOfCase(testString, stringToRank, caseRanking) {\n  var testIndex = testString.toLowerCase().indexOf(stringToRank.toLowerCase());\n\n  switch (caseRanking) {\n    case caseRankings.SNAKE:\n      return testString[testIndex - 1] === '_';\n    case caseRankings.KEBAB:\n      return testString[testIndex - 1] === '-';\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      return testIndex !== -1 && testString[testIndex] === testString[testIndex].toUpperCase();\n    default:\n      return false;\n  }\n}\n\n/**\n * Check if stringToRank is an acronym for a partial case\n * @example\n * // returns true\n * isCaseAcronym('super_duper_file', 'sdf', caseRankings.SNAKE)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the acronym to test\n * @param {Number} caseRank - the ranking of the case\n * @returns {Boolean} whether the stringToRank is an acronym for the testString\n */\nfunction isCaseAcronym(testString, stringToRank, caseRank) {\n  var splitValue = null;\n  switch (caseRank) {\n    case caseRankings.SNAKE:\n      splitValue = '_';\n      break;\n    case caseRankings.KEBAB:\n      splitValue = '-';\n      break;\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      splitValue = /(?=[A-Z])/;\n      break;\n    default:\n      splitValue = null;\n  }\n\n  var splitTestString = testString.split(splitValue);\n  return stringToRank.toLowerCase().split('').reduce(function (correct, char, charIndex) {\n    var splitItem = splitTestString[charIndex];\n    return correct && splitItem && splitItem[0].toLowerCase() === char;\n  }, true);\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a loose match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(testString, stringToRank) {\n  var charNumber = 0;\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n      if (stringChar === matchChar) {\n        return j + 1;\n      }\n    }\n    return -1;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n  charNumber = firstIndex;\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return function (spread) {\n    var matching = spread - stringToRank.length + 1;\n    var ranking = rankings.MATCHES + 1 / matching;\n    return ranking;\n  }(spread);\n}\n\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aIndex = a.index,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bIndex = b.index,\n      bKeyIndex = b.keyIndex;\n\n  if (aRank === bRank) {\n    if (aKeyIndex === bKeyIndex) {\n      return aIndex < bIndex ? aFirst : bFirst;\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n\n  value = '' + value; // toString\n  if (!keepDiacritics) {\n    value = diacritics.clean(value);\n  }\n  return value;\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n  var value = void 0;\n  if (typeof key === 'function') {\n    value = key(item);\n    // eslint-disable-next-line no-negated-condition\n  } else if (key.indexOf('.') !== -1) {\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj ? itemObj[nestedKey] : null;\n    }, item);\n  } else {\n    value = item[key];\n  }\n  // concat because `value` can be a string or an array\n  // eslint-disable-next-line\n  return value != null ? [].concat(value) : null;\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n    return allVals;\n  }, []);\n}\n\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = { key: key };\n  }\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n}\n\nexport default matchSorter;\nexport { rankings };\n"]},"metadata":{},"sourceType":"module"}